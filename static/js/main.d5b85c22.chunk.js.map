{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","posts","_this2","this","setTimeout","setState","title","body","react_default","a","createElement","className","appbar_default","button_default","color","panel_default","form_default","input_default","placeholder","textarea_default","variant","container_default","map","p","App_Blogpost","Component","Blogpost","style","fontSize","lineHeight","props","bundle_default","dangerouslySetInnerHTML","__html","count","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+WAUMA,6MACJC,MAAQ,CACNC,MAAO,CAAC,GAAI,wFAEM,IAAAC,EAAAC,KAClBC,WAAW,WACTF,EAAKG,SAAS,CACZJ,MAAO,CACL,CACEK,MAAO,SACPC,KAAM,0BAER,CACED,MAAO,SACPC,KAAM,mBAER,CACED,MAAO,SACPC,KAAM,mBAER,CACED,MAAO,SACPC,KAAM,mBAER,CACED,MAAO,SACPC,KAAM,mBAER,CACED,MAAO,SACPC,KAAM,uBAIX,sCAGH,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACE,EAAAH,EAAD,KACED,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQK,MAAM,UAAd,WAEFN,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAACM,EAAAP,EAAD,KACED,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAOS,YAAY,YACnBV,EAAAC,EAAAC,cAACO,EAAAR,EAAD,CAAOS,YAAY,YACnBV,EAAAC,EAAAC,cAACS,EAAAV,EAAD,CAAUS,YAAY,aACtBV,EAAAC,EAAAC,cAACG,EAAAJ,EAAD,CAAQW,QAAQ,UAAhB,YAGJZ,EAAAC,EAAAC,cAACW,EAAAZ,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACZR,KAAKH,MAAMC,MAAMqB,IAAI,SAAAC,GAAC,OACrBf,EAAAC,EAAAC,cAACc,EAAaD,eAtDVE,aA+DZC,mLAEF,OACElB,EAAAC,EAAAC,cAACK,EAAAN,EAAD,KACED,EAAAC,EAAAC,cAAA,OAAKiB,MAAO,CAAEC,SAAU,GAAIC,WAAY,IACtCrB,EAAAC,EAAAC,cAAA,UAAKP,KAAK2B,MAAMxB,OAASE,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,OACzBD,EAAAC,EAAAC,cAAA,OACEC,UAAU,OACVqB,wBAAyB,CAAEC,OAAQ9B,KAAK2B,MAAMvB,QAE/CJ,KAAK2B,MAAMvB,MAAQC,EAAAC,EAAAC,cAACqB,EAAAtB,EAAD,CAAUyB,MAAO,aAVxBT,aAiBR1B,IC9EKoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOjC,EAAAC,EAAAC,cAACgC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.d5b85c22.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport Appbar from \"muicss/lib/react/appbar\";\nimport Button from \"muicss/lib/react/button\";\nimport Panel from \"muicss/lib/react/panel\";\nimport Form from \"muicss/lib/react/form\";\nimport Input from \"muicss/lib/react/input\";\nimport Textarea from \"muicss/lib/react/textarea\";\nimport Container from \"muicss/lib/react/container\";\nimport Skeleton from \"react-loading-skeleton\";\n\nclass App extends Component {\n  state = {\n    posts: [{}, {}]\n  };\n  componentDidMount() {\n    setTimeout(() => {\n      this.setState({\n        posts: [\n          {\n            title: \"hi mom\",\n            body: \"<h1>this is stuff</h1>\"\n          },\n          {\n            title: \"hi mom\",\n            body: \"this is my body\"\n          },\n          {\n            title: \"hi mom\",\n            body: \"this is my body\"\n          },\n          {\n            title: \"hi mom\",\n            body: \"this is my body\"\n          },\n          {\n            title: \"hi mom\",\n            body: \"this is my body\"\n          },\n          {\n            title: \"hi mom\",\n            body: \"this is my body\"\n          }\n        ]\n      });\n    }, 1000);\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Appbar>\n          <Button color=\"accent\">button</Button>\n        </Appbar>\n        <Panel>\n          <Form>\n            <legend>Title</legend>\n            <Input placeholder=\"Input 1\" />\n            <Input placeholder=\"Input 2\" />\n            <Textarea placeholder=\"Textarea\" />\n            <Button variant=\"raised\">Submit</Button>\n          </Form>\n        </Panel>\n        <Container>\n          <div className=\"panels\">\n            {this.state.posts.map(p => (\n              <Blogpost {...p} />\n            ))}\n          </div>\n        </Container>\n      </div>\n    );\n  }\n}\n\nclass Blogpost extends Component {\n  render() {\n    return (\n      <Panel>\n        <div style={{ fontSize: 20, lineHeight: 2 }}>\n          <h1>{this.props.title || <Skeleton />}</h1>\n          <div\n            className=\"body\"\n            dangerouslySetInnerHTML={{ __html: this.props.body }}\n          />\n          {this.props.body || <Skeleton count={2} />}\n        </div>\n      </Panel>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}